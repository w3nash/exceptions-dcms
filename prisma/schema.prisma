// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserDetails {
    id            String   @id @default(cuid())
    user          User     @relation(fields: [userId], references: [id])
    userId        String   @unique
    lastName      String
    firstName     String
    middleName    String?
    birthday      String
    age           Int
    sex           String?
    address       String?
    contactNumber String?
    position      String
    monthlySalary String?
}

model User {
    id            String       @id @default(cuid())
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    username      String       @unique
    password      String // @db.Text
    role          Int          @default(1)
    accounts      Account[]
    sessions      Session[]
    UserDetails   UserDetails?
    Dentist       Dentist[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Dentist {
    id          String        @id @default(cuid())
    user        User          @relation(fields: [userId], references: [id])
    userId      String
    Patient     Patient[]
    Appointment Appointment[]
}

model MedicalHistory {
    id                 String   @id @default(cuid())
    patient            Patient  @relation(fields: [patientId], references: [id])
    patientId          String   @unique
    hospitalization    String?
    medications        String?
    diseases           String?
    allergies          String?
    xray               String?
    facialMarks        String?
    tobaccoConsumption String?
    alcoholConsumption String?
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
}

model Procedure {
    id            String      @id @default(cuid())
    procedureName String
    Treatment     Treatment[]
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model Treatment {
    id          String    @id @default(cuid())
    patient     Patient   @relation(fields: [patientId], references: [id])
    patientId   String
    Procedure   Procedure @relation(fields: [procedureId], references: [id])
    procedureId String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Appointment {
    id        String   @id @default(cuid())
    patient   Patient  @relation(fields: [patientId], references: [id])
    patientId String
    dentist   Dentist  @relation(fields: [dentistId], references: [id])
    dentistId String
    schedule  DateTime
    status    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Patient {
    id             String          @id @default(cuid())
    lastName       String
    firstName      String
    middleName     String?
    age            Int
    sex            String
    address        String
    contactNumber  String?
    email          String          @unique
    birthday       String // Date
    nationality    String
    occupation     String
    refferedBy     String?
    MedicalHistory MedicalHistory?
    Treatment      Treatment[]
    Dentist        Dentist         @relation(fields: [dentistId], references: [id])
    dentistId      String
    Appointment    Appointment[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
}
