// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model UserDetails {
    id            String   @id @default(cuid())
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String   @unique
    lastName      String
    firstName     String
    middleName    String?
    birthday      DateTime
    sex           String
    address       String?
    contactNumber String?
    position      String
    monthlySalary String?
}

model User {
    id            String        @id @default(cuid())
    email         String        @unique
    emailVerified DateTime?
    image         String?
    username      String        @unique
    password      String // @db.Text
    role          Int           @default(1)
    accounts      Account[]
    sessions      Session[]
    UserDetails   UserDetails?
    Appointment   Appointment[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Appointment {
    id        String   @id @default(cuid())
    Patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
    patientId String
    schedule  DateTime
    status    String
    type      String
    Dentist   User     @relation(fields: [dentistId], references: [id], onDelete: Cascade)
    dentistId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Patient {
    id            String   @id @default(cuid())
    lastName      String
    firstName     String
    middleName    String?
    sex           String
    address       String
    contactNumber String?
    email         String   @unique
    birthday      DateTime
    nationality   String
    occupation    String
    referredBy    String?
    Appointment   Appointment[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}
